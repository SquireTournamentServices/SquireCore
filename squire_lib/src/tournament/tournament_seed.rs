use serde::{Deserialize, Serialize};
use crate::error::TournamentError;
use crate::tournament::tournament::TournamentPreset;

#[derive(Serialize, Deserialize, Debug, Clone, Hash, PartialEq, Eq)]
/// Container for all the information needed to start a tournament
pub struct TournamentSeed {
    /// The name of the to-be tournament
    pub name: String,
    /// The initial present of the to-be tournament
    pub preset: TournamentPreset,
    /// The initial format fo the to-be tournament
    pub format: String,
}

impl TournamentSeed {
    const MAGIC_SYNONYMS: &[&'static str] = &[
        "Magic",
        "Illusion",
        "Wizardry",
        "Alchemy",
        "Bewitchment",
        "Conjuring",
        "Devilry",
        "Divination",
        "Enchantment",
        "Exorcism",
        "Horoscopy",
        "Incantation",
        "Legerdemain",
        "Magnetism",
        "Necromancy",
        "Occultism",
        "Predicition",
        "Presage",
        "Prestidigitation",
        "Prophecy",
        "Soothsaying",
        "Sorcery",
        "Instant",
        "Superstition",
        "Thaumaturgy",
        "Voodoo",
        "Witchcraft",
    ];

    const GATHERING_SYNONYMS: &[&'static str] = &[
        "Gathering",
        "Association",
        "Caucus",
        "Collection",
        "Conclave",
        "Conference",
        "Congregation",
        "Convention",
        "Crowd",
        "Function",
        "Group",
        "Mass",
        "Meeting",
        "Party",
        "Throng",
        "Acquisition",
        "Affair",
        "Aggregate",
        "Aggregation",
        "Band",
        "Body",
        "Bunch",
        "Clambake",
        "Company",
        "Concentration",
        "Concourse",
        "Congress",
        "Convocation",
        "Crush",
        "Drove",
        "Flock",
        "Gain",
        "Heap",
        "Herd",
        "Horde",
        "Huddle",
        "Junction",
        "Knot",
        "Levy",
        "Meet",
        "Muster",
        "Parley",
        "Pile",
        "Rally",
        "Roundup",
        "Society",
        "Stock",
        "Stockpile",
        "Swarm",
        "Turnout",
        "Union",
        "Get-together",
        "Social function",
    ];

    /// Returns an autogenerated tournament name
    pub fn default_name() -> String {
        let mut bytes = [0; 2];
        let _ = getrandom::getrandom(&mut bytes);

        fn select(slice: &[&'static str], n: u8) -> &'static str {
            slice[n as usize % slice.len()]
        }

        format!(
            "{}: the {}",
            select(Self::MAGIC_SYNONYMS, bytes[0]),
            select(Self::GATHERING_SYNONYMS, bytes[1])
        )
    }

    /// Creates a new tournament seed, generating a name using [Self::default_name]
    pub fn new_named(preset: TournamentPreset, format: String) -> Self {
        Self {
            name: Self::default_name(),
            preset,
            format,
        }
    }

    /// Creates a new tournament seed
    pub fn new(
        name: String,
        preset: TournamentPreset,
        format: String,
    ) -> Result<Self, TournamentError> {
        // name validation
        if !Self::validate_name(&name) {
            return Err(TournamentError::BadTournamentName);
        }

        Ok(Self {
            name,
            preset,
            format,
        })
    }

    /// Validates a tournament name. Returns true if the name is valid.
    pub fn validate_name(name: &str) -> bool {
        !name.trim().is_empty()
    }
}
